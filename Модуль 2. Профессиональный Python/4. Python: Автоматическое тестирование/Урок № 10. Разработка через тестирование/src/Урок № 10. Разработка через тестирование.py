"""В этом упражнении вам предстоит попрактиковаться в подходе «Разработка
через тестирование». Вам нужно написать и тесты, и реализацию функции.
Сначала напишите тесты и запуcтите тестирование. Тесты должны упасть. Затем
напишите решение, которое будет проходить тесты."""

"""tests/test_fill.py

Напишите тесты для функции fill(coll, value, begin, end),
которая заполняет элементы списка переданным значением, начиная со старта и
заканчивая конечной позицией (при этом не включая ее). Обратите внимание,
что функция меняет исходный список. Функция работает только с положительными
позициями.

Функция принимает следующие аргументы:

    - coll – список, элементы которого будут заполнены;
    - value – значение, которым будут заполнены элементы списка;
    - begin – стартовая позиция, по умолчанию равна нулю;
    - end – конечная позиция, по умолчанию равна длине списка.

Так функция выглядит в коде:"""

# Все вызовы нужно рассматривать, как независимые
# coll =  [1, 2, 3, 4]
#
# fill(coll, '*', 1, 3)
# print(coll)  # => [1, '*', '*', 4]
#
# fill(coll, '*')
# print(coll)  # => ['*', '*', '*', '*']
#
# fill(coll, '*', 4)
# print(coll)  # => [1, 2, 3, 4]
#
# fill(coll, '*', 0, 10)
# print(coll)  # => ['*', '*', '*', '*']

"""src/solution.py

Реализуйте функцию fill(coll, value, begin, end), основываясь на описании и 
примерах ее работы.

Подсказки

Один из тестов уже написан в упражнении. Используйте его как образец при 
написании своих тестов."""


def fill(coll, value, begin=0, end=None):
    if end is None:
        end = len(coll)
    value_list = []
    for i in coll[begin:end]:
        value_list.append(value)
    coll[begin:end] = value_list
    return coll

coll =  [1, 2, 3, 4]

fill(coll, '*', 1, 3)
print(coll)  # => [1, '*', '*', 4]

fill(coll, '*')
print(coll)  # => ['*', '*', '*', '*']

fill(coll, '*', 4)
print(coll)  # => [1, 2, 3, 4]

fill(coll, '*', 0, 10)
print(coll)  # => ['*', '*', '*', '*']

'SOLUTION'
# def fill(coll, value, begin=0, end=None):
#     if end is None:
#         end = len(coll)
#     chunk = [value for _ in coll[begin:end]]
#     coll[begin:end] = chunk

