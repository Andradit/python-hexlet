"""Проверка множеств на равенство"""

print(set([1, 2, 3, 2, 1]) == {3, 1, 2})  # True

"""В Python есть специальный протокол проверки на равенство. Большинство
встроенных типов данных поддерживает этот протокол. Можно проверять на
равенство числа, строки, булевы значения. А еще можно приравнивать кортежи,
списки, словари.
Здесь Python поступает очень разумно. Если приравнять две коллекции одного
типа, то эти коллекции будут считаться равными, если их элементы попарно равны
с точки зрения протокола. Например:"""

print([1, 2, ["foo", "bar"]] == [1, 2, ["foo"] + ["bar"]])  # True
print((1, True, []) == (1, True, []))  # True
print({"a": 1, "b": 2} == {"b": 2, "a": 1})  # True
"""Словари равны, даже если порядок ключей разный — лишь бы были равны
значения по соответствующим ключам и сами наборы ключей были одинаковыми."""


"""Объединение множеств

По аналогии с множествами в математике, множества в Python поддерживают
операцию объединения (union). Эта операция не объединяет множества, а
возвращает новый объект.

Этот объект — это такое множество, которое содержит все элементы, содержащиеся
хотя бы в одном из оригинальных множеств. По смыслу объединение похоже на
операцию "ИЛИ" из булевой логики: элемент будет присутствовать в объединении,
если он присутствует в первом исходном множестве ИЛИ во втором.
Для объединения множеств в Python используется оператор |:"""

visited_by_masha = {'Paris', 'London', 'Rome'}
visited_by_kolya = {'Moscow', 'Paris', 'Berlin'}
print(visited_by_kolya | visited_by_masha)  # {'London', 'Moscow', 'Paris'}


"""Пересечение множеств

Еще есть «операция И» — пересечение множеств (intersection). В пересечение
входят элементы, присутствующие в первом из оригинальных множеств И во втором:
В Python оператор пересечения — &:"""

visited_by_masha = {'Paris', 'London'}
visited_by_kolya = {'Moscow', 'Paris'}
print(visited_by_kolya & visited_by_masha)  # {'Paris'}


"""Разность множеств

Разность множеств (difference) — такое множество, элементы которого содержатся
в первом оригинальном множестве, но не содержатся во втором. Разность
представлена оператором -, потому что по смыслу оператор похож на вычитание из
арифметики:"""

visited_by_masha = {'Paris', 'London'}
visited_by_kolya = {'Moscow', 'Paris'}
print(visited_by_masha - visited_by_kolya)  # {'London'}
print(visited_by_kolya - visited_by_masha)  # {'Moscow'}


"""Симметрическая разность

Симметрическая разность (symmetric difference) — множество, в которое входят
элементы, присутствующие ЛИБО в первом, ЛИБО во втором оригинальном множестве:
По смыслу операция похожа на исключающее ИЛИ (xor), поэтому и представлена
оператором ^:"""

visited_by_masha = {'Paris', 'London'}
visited_by_kolya = {'Moscow', 'Paris'}
print(visited_by_kolya ^ visited_by_masha)  # {'London', 'Moscow'}


"""Подмножества и надмножества

Одно множество является подмножеством другого (subset), если все элементы
первого входят во второе, но второе может содержать еще и другие элементы.
Второе в этом случае является надмножеством для первого (superset):
При этом равные множества являются друг для друга одновременно и
подмножествами и надмножествами.
В Python соотношение множеств можно проверить с помощью методов issubset и
issuperset:"""

a = {1, 2, 3, 4}
b = {3, 4}
print(b.issubset(a))  # True
print(a.issuperset(b))  # True
