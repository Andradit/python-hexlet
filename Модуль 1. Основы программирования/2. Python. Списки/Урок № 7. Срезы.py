# l = [1, 2, 3, 4, 5, 6]
# l[::2] = l[1::2]
# print(l)

# s = 'ABRAKADABRA'
# print(s[6:1:-1])

# l = [1, 2, 3, 4, 5, 6]
# print(l[-3:])

# print(l[:-4])

"""В этом упражнении вам нужно будет реализовать две функции — rotated_left() и rotated_right(). Каждая функция должна принять список, кортеж или строку в качестве аргумента, с помощью срезов и конкатенации получить новое значение того же типа, вернуть это значение. Отличаются функции лишь "направлением поворота" (см. примеры ниже).

Т.к. и строки, и списки с кортежами разрешают конкатенацию и срезы, ваш код не должен проверять тип аргумента — нужно обойтись только лишь срезами и конкатенацией!

Обратите внимание: имена функций содержат глагол с окончанием ed — в пайтоне подобным образом часто называют функции, возвращающие новое значение на основе старого.

При вращении влево первый элемент перемещается в конец:

rotated_left("ABCD")  # "BCDA"

При вращении вправо последний элемент перемещается в начало:

rotated_right([1, 2, 3, 4])  # [4, 1, 2, 3]"""


def rotated_left(items):
    return items[1:] + items[:1]


def rotated_right(items):
    return items[-1:] + items[:-1]


print(rotated_left("ABC"))

print(rotated_left((1, 2, 3, 4)))

print(rotated_left([1, 2, 3, 4]))

print('')

print(rotated_right("ABCD"))

print(rotated_right((1, 2, 3, 4)))

print(rotated_right([1, 2, 3, 4]))
